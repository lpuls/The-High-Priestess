// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Temp/Config.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Config {

  /// <summary>Holder for reflection information generated from Temp/Config.proto</summary>
  public static partial class ConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for Temp/Config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFUZW1wL0NvbmZpZy5wcm90byIoCgVWZWN0MxIJCgFYGAEgASgFEgkKAVkY",
            "AiABKAUSCQoBWhgDIAEoBSI1CgdCb3hJbmZvEgoKAklEGAEgASgFEgwKBFR5",
            "cGUYAiABKAUSEAoIUG9zaXRpb24YAyABKAUinAEKBVNjZW5lEgoKAklEGAEg",
            "ASgFEg0KBVdpZHRoGAIgASgFEgwKBERlZXAYAyABKAUSDwoHQm94R3JpZBgE",
            "IAMoBRIUCgxHcmlkTWF0ZXJpYWwYBSABKAkSFwoPQm94R3JpZE1hdGVyaWFs",
            "GAYgASgJEhYKBEJveHMYByADKAsyCC5Cb3hJbmZvEhIKClBsYXllckdyaWQY",
            "CCABKAUikQEKDUdvbGJhbFNldHRpbmcSCgoCSUQYASABKAUSEQoJSGl0RWZm",
            "ZWN0GAIgASgJEhYKDkNyaXRpY2FsRWZmZWN0GAMgASgJEhUKDUNyaXRpY2Fs",
            "QW5nbGUYBCABKAISGAoQVmljaXRtS3VydHVuVGltZRgFIAEoAhIYChBDYXN0",
            "ZXJLdXJ0dW5UaW1lGAYgASgCIj0KCUxldmVsSW5mbxIKCgJJRBgBIAEoBRIR",
            "CglBc3NldFBhdGgYAiABKAkSEQoJU2NlbmVOYW1lGAMgASgJIiwKDVRlbGVw",
            "b3J0UG9pbnQSCgoCSUQYASABKAUSDwoHTGV2ZWxJRBgCIAEoBSJUCgVQcm9w",
            "cxIKCgJJRBgBIAEoBRIMCgROYW1lGAIgASgJEgwKBEljb24YAyABKAkSDwoH",
            "SXNTdGFjaxgEIAEoCBISCgpTdGFja0NvdW50GAUgASgFKlEKB0VsZW1lbnQS",
            "EAoMRWxlbWVudF9OT05FEAASDwoLRWxlbWVudF9SRUQQARIRCg1FbGVtZW50",
            "X0dSRUVOEAISEAoMRWxlbWVudF9CTFVFEANCCaoCBkNvbmZpZ2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Config.Element), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.Vect3), global::Config.Vect3.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.BoxInfo), global::Config.BoxInfo.Parser, new[]{ "ID", "Type", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.Scene), global::Config.Scene.Parser, new[]{ "ID", "Width", "Deep", "BoxGrid", "GridMaterial", "BoxGridMaterial", "Boxs", "PlayerGrid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.GolbalSetting), global::Config.GolbalSetting.Parser, new[]{ "ID", "HitEffect", "CriticalEffect", "CriticalAngle", "VicitmKurtunTime", "CasterKurtunTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.LevelInfo), global::Config.LevelInfo.Parser, new[]{ "ID", "AssetPath", "SceneName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.TeleportPoint), global::Config.TeleportPoint.Parser, new[]{ "ID", "LevelID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Config.Props), global::Config.Props.Parser, new[]{ "ID", "Name", "Icon", "IsStack", "StackCount" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Element {
    [pbr::OriginalName("Element_NONE")] None = 0,
    [pbr::OriginalName("Element_RED")] Red = 1,
    [pbr::OriginalName("Element_GREEN")] Green = 2,
    [pbr::OriginalName("Element_BLUE")] Blue = 3,
  }

  #endregion

  #region Messages
  public sealed partial class Vect3 : pb::IMessage<Vect3> {
    private static readonly pb::MessageParser<Vect3> _parser = new pb::MessageParser<Vect3>(() => new Vect3());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vect3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vect3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vect3(Vect3 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vect3 Clone() {
      return new Vect3(this);
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "Z" field.</summary>
    public const int ZFieldNumber = 3;
    private int z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vect3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vect3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Z != 0) hash ^= Z.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (Z != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Z != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Z);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vect3 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Z != 0) {
        Z = other.Z;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            Z = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BoxInfo : pb::IMessage<BoxInfo> {
    private static readonly pb::MessageParser<BoxInfo> _parser = new pb::MessageParser<BoxInfo>(() => new BoxInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BoxInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoxInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoxInfo(BoxInfo other) : this() {
      iD_ = other.iD_;
      type_ = other.type_;
      position_ = other.position_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoxInfo Clone() {
      return new BoxInfo(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 3;
    private int position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BoxInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BoxInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Type != other.Type) return false;
      if (Position != other.Position) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Position != 0) hash ^= Position.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (Position != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BoxInfo other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Position != 0) {
        Position = other.Position;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            Position = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Scene : pb::IMessage<Scene> {
    private static readonly pb::MessageParser<Scene> _parser = new pb::MessageParser<Scene>(() => new Scene());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Scene> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scene() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scene(Scene other) : this() {
      iD_ = other.iD_;
      width_ = other.width_;
      deep_ = other.deep_;
      boxGrid_ = other.boxGrid_.Clone();
      gridMaterial_ = other.gridMaterial_;
      boxGridMaterial_ = other.boxGridMaterial_;
      boxs_ = other.boxs_.Clone();
      playerGrid_ = other.playerGrid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scene Clone() {
      return new Scene(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "Width" field.</summary>
    public const int WidthFieldNumber = 2;
    private int width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "Deep" field.</summary>
    public const int DeepFieldNumber = 3;
    private int deep_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Deep {
      get { return deep_; }
      set {
        deep_ = value;
      }
    }

    /// <summary>Field number for the "BoxGrid" field.</summary>
    public const int BoxGridFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_boxGrid_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> boxGrid_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> BoxGrid {
      get { return boxGrid_; }
    }

    /// <summary>Field number for the "GridMaterial" field.</summary>
    public const int GridMaterialFieldNumber = 5;
    private string gridMaterial_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GridMaterial {
      get { return gridMaterial_; }
      set {
        gridMaterial_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BoxGridMaterial" field.</summary>
    public const int BoxGridMaterialFieldNumber = 6;
    private string boxGridMaterial_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BoxGridMaterial {
      get { return boxGridMaterial_; }
      set {
        boxGridMaterial_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Boxs" field.</summary>
    public const int BoxsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Config.BoxInfo> _repeated_boxs_codec
        = pb::FieldCodec.ForMessage(58, global::Config.BoxInfo.Parser);
    private readonly pbc::RepeatedField<global::Config.BoxInfo> boxs_ = new pbc::RepeatedField<global::Config.BoxInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Config.BoxInfo> Boxs {
      get { return boxs_; }
    }

    /// <summary>Field number for the "PlayerGrid" field.</summary>
    public const int PlayerGridFieldNumber = 8;
    private int playerGrid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerGrid {
      get { return playerGrid_; }
      set {
        playerGrid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Scene);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Scene other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Width != other.Width) return false;
      if (Deep != other.Deep) return false;
      if(!boxGrid_.Equals(other.boxGrid_)) return false;
      if (GridMaterial != other.GridMaterial) return false;
      if (BoxGridMaterial != other.BoxGridMaterial) return false;
      if(!boxs_.Equals(other.boxs_)) return false;
      if (PlayerGrid != other.PlayerGrid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Deep != 0) hash ^= Deep.GetHashCode();
      hash ^= boxGrid_.GetHashCode();
      if (GridMaterial.Length != 0) hash ^= GridMaterial.GetHashCode();
      if (BoxGridMaterial.Length != 0) hash ^= BoxGridMaterial.GetHashCode();
      hash ^= boxs_.GetHashCode();
      if (PlayerGrid != 0) hash ^= PlayerGrid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (Width != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Width);
      }
      if (Deep != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Deep);
      }
      boxGrid_.WriteTo(output, _repeated_boxGrid_codec);
      if (GridMaterial.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(GridMaterial);
      }
      if (BoxGridMaterial.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(BoxGridMaterial);
      }
      boxs_.WriteTo(output, _repeated_boxs_codec);
      if (PlayerGrid != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(PlayerGrid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Deep != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Deep);
      }
      size += boxGrid_.CalculateSize(_repeated_boxGrid_codec);
      if (GridMaterial.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GridMaterial);
      }
      if (BoxGridMaterial.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BoxGridMaterial);
      }
      size += boxs_.CalculateSize(_repeated_boxs_codec);
      if (PlayerGrid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerGrid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Scene other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Deep != 0) {
        Deep = other.Deep;
      }
      boxGrid_.Add(other.boxGrid_);
      if (other.GridMaterial.Length != 0) {
        GridMaterial = other.GridMaterial;
      }
      if (other.BoxGridMaterial.Length != 0) {
        BoxGridMaterial = other.BoxGridMaterial;
      }
      boxs_.Add(other.boxs_);
      if (other.PlayerGrid != 0) {
        PlayerGrid = other.PlayerGrid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 16: {
            Width = input.ReadInt32();
            break;
          }
          case 24: {
            Deep = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            boxGrid_.AddEntriesFrom(input, _repeated_boxGrid_codec);
            break;
          }
          case 42: {
            GridMaterial = input.ReadString();
            break;
          }
          case 50: {
            BoxGridMaterial = input.ReadString();
            break;
          }
          case 58: {
            boxs_.AddEntriesFrom(input, _repeated_boxs_codec);
            break;
          }
          case 64: {
            PlayerGrid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GolbalSetting : pb::IMessage<GolbalSetting> {
    private static readonly pb::MessageParser<GolbalSetting> _parser = new pb::MessageParser<GolbalSetting>(() => new GolbalSetting());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GolbalSetting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GolbalSetting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GolbalSetting(GolbalSetting other) : this() {
      iD_ = other.iD_;
      hitEffect_ = other.hitEffect_;
      criticalEffect_ = other.criticalEffect_;
      criticalAngle_ = other.criticalAngle_;
      vicitmKurtunTime_ = other.vicitmKurtunTime_;
      casterKurtunTime_ = other.casterKurtunTime_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GolbalSetting Clone() {
      return new GolbalSetting(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "HitEffect" field.</summary>
    public const int HitEffectFieldNumber = 2;
    private string hitEffect_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HitEffect {
      get { return hitEffect_; }
      set {
        hitEffect_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CriticalEffect" field.</summary>
    public const int CriticalEffectFieldNumber = 3;
    private string criticalEffect_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CriticalEffect {
      get { return criticalEffect_; }
      set {
        criticalEffect_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CriticalAngle" field.</summary>
    public const int CriticalAngleFieldNumber = 4;
    private float criticalAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CriticalAngle {
      get { return criticalAngle_; }
      set {
        criticalAngle_ = value;
      }
    }

    /// <summary>Field number for the "VicitmKurtunTime" field.</summary>
    public const int VicitmKurtunTimeFieldNumber = 5;
    private float vicitmKurtunTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VicitmKurtunTime {
      get { return vicitmKurtunTime_; }
      set {
        vicitmKurtunTime_ = value;
      }
    }

    /// <summary>Field number for the "CasterKurtunTime" field.</summary>
    public const int CasterKurtunTimeFieldNumber = 6;
    private float casterKurtunTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CasterKurtunTime {
      get { return casterKurtunTime_; }
      set {
        casterKurtunTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GolbalSetting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GolbalSetting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (HitEffect != other.HitEffect) return false;
      if (CriticalEffect != other.CriticalEffect) return false;
      if (CriticalAngle != other.CriticalAngle) return false;
      if (VicitmKurtunTime != other.VicitmKurtunTime) return false;
      if (CasterKurtunTime != other.CasterKurtunTime) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (HitEffect.Length != 0) hash ^= HitEffect.GetHashCode();
      if (CriticalEffect.Length != 0) hash ^= CriticalEffect.GetHashCode();
      if (CriticalAngle != 0F) hash ^= CriticalAngle.GetHashCode();
      if (VicitmKurtunTime != 0F) hash ^= VicitmKurtunTime.GetHashCode();
      if (CasterKurtunTime != 0F) hash ^= CasterKurtunTime.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (HitEffect.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(HitEffect);
      }
      if (CriticalEffect.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CriticalEffect);
      }
      if (CriticalAngle != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(CriticalAngle);
      }
      if (VicitmKurtunTime != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(VicitmKurtunTime);
      }
      if (CasterKurtunTime != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(CasterKurtunTime);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (HitEffect.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HitEffect);
      }
      if (CriticalEffect.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CriticalEffect);
      }
      if (CriticalAngle != 0F) {
        size += 1 + 4;
      }
      if (VicitmKurtunTime != 0F) {
        size += 1 + 4;
      }
      if (CasterKurtunTime != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GolbalSetting other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.HitEffect.Length != 0) {
        HitEffect = other.HitEffect;
      }
      if (other.CriticalEffect.Length != 0) {
        CriticalEffect = other.CriticalEffect;
      }
      if (other.CriticalAngle != 0F) {
        CriticalAngle = other.CriticalAngle;
      }
      if (other.VicitmKurtunTime != 0F) {
        VicitmKurtunTime = other.VicitmKurtunTime;
      }
      if (other.CasterKurtunTime != 0F) {
        CasterKurtunTime = other.CasterKurtunTime;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 18: {
            HitEffect = input.ReadString();
            break;
          }
          case 26: {
            CriticalEffect = input.ReadString();
            break;
          }
          case 37: {
            CriticalAngle = input.ReadFloat();
            break;
          }
          case 45: {
            VicitmKurtunTime = input.ReadFloat();
            break;
          }
          case 53: {
            CasterKurtunTime = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LevelInfo : pb::IMessage<LevelInfo> {
    private static readonly pb::MessageParser<LevelInfo> _parser = new pb::MessageParser<LevelInfo>(() => new LevelInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelInfo(LevelInfo other) : this() {
      iD_ = other.iD_;
      assetPath_ = other.assetPath_;
      sceneName_ = other.sceneName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelInfo Clone() {
      return new LevelInfo(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "AssetPath" field.</summary>
    public const int AssetPathFieldNumber = 2;
    private string assetPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssetPath {
      get { return assetPath_; }
      set {
        assetPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SceneName" field.</summary>
    public const int SceneNameFieldNumber = 3;
    private string sceneName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SceneName {
      get { return sceneName_; }
      set {
        sceneName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (AssetPath != other.AssetPath) return false;
      if (SceneName != other.SceneName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (AssetPath.Length != 0) hash ^= AssetPath.GetHashCode();
      if (SceneName.Length != 0) hash ^= SceneName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (AssetPath.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AssetPath);
      }
      if (SceneName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SceneName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (AssetPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetPath);
      }
      if (SceneName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SceneName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelInfo other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.AssetPath.Length != 0) {
        AssetPath = other.AssetPath;
      }
      if (other.SceneName.Length != 0) {
        SceneName = other.SceneName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 18: {
            AssetPath = input.ReadString();
            break;
          }
          case 26: {
            SceneName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TeleportPoint : pb::IMessage<TeleportPoint> {
    private static readonly pb::MessageParser<TeleportPoint> _parser = new pb::MessageParser<TeleportPoint>(() => new TeleportPoint());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeleportPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeleportPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeleportPoint(TeleportPoint other) : this() {
      iD_ = other.iD_;
      levelID_ = other.levelID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeleportPoint Clone() {
      return new TeleportPoint(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "LevelID" field.</summary>
    public const int LevelIDFieldNumber = 2;
    private int levelID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelID {
      get { return levelID_; }
      set {
        levelID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeleportPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeleportPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (LevelID != other.LevelID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (LevelID != 0) hash ^= LevelID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (LevelID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LevelID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (LevelID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeleportPoint other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.LevelID != 0) {
        LevelID = other.LevelID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 16: {
            LevelID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Props : pb::IMessage<Props> {
    private static readonly pb::MessageParser<Props> _parser = new pb::MessageParser<Props>(() => new Props());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Props> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Config.ConfigReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Props() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Props(Props other) : this() {
      iD_ = other.iD_;
      name_ = other.name_;
      icon_ = other.icon_;
      isStack_ = other.isStack_;
      stackCount_ = other.stackCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Props Clone() {
      return new Props(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Icon" field.</summary>
    public const int IconFieldNumber = 3;
    private string icon_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsStack" field.</summary>
    public const int IsStackFieldNumber = 4;
    private bool isStack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStack {
      get { return isStack_; }
      set {
        isStack_ = value;
      }
    }

    /// <summary>Field number for the "StackCount" field.</summary>
    public const int StackCountFieldNumber = 5;
    private int stackCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StackCount {
      get { return stackCount_; }
      set {
        stackCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Props);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Props other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Name != other.Name) return false;
      if (Icon != other.Icon) return false;
      if (IsStack != other.IsStack) return false;
      if (StackCount != other.StackCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ID != 0) hash ^= ID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      if (IsStack != false) hash ^= IsStack.GetHashCode();
      if (StackCount != 0) hash ^= StackCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Icon);
      }
      if (IsStack != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsStack);
      }
      if (StackCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(StackCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (IsStack != false) {
        size += 1 + 1;
      }
      if (StackCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StackCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Props other) {
      if (other == null) {
        return;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
      if (other.IsStack != false) {
        IsStack = other.IsStack;
      }
      if (other.StackCount != 0) {
        StackCount = other.StackCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Icon = input.ReadString();
            break;
          }
          case 32: {
            IsStack = input.ReadBool();
            break;
          }
          case 40: {
            StackCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
